@startuml

' --- Configuración Visual ---
skinparam package {
  BackgroundColor LightGray
  BorderColor Gray
}

' --- Capa de Acceso a Datos (Base) ---
package "Capa de Datos (DAO)" <<Database>> {
  abstract class DAOBase <<abstract>> {
    + crear(entity: T): void
    + borrar(id: Long): void
    + actualizar(entity: T): void
    + buscarPorId(id: Long): T
    + listar(): List<T>
    + listar(maxResults: int, firstResult: int): List<T>
    - listar(all: boolean, maxResults: int, firstResult: int): List<T>
  }
}

' --- Módulo Principal de la Aplicación ---
class Inicio

' --- Módulo de Movimientos ---
package "Gestión de Movimientos" #LightBlue {
  class ControladorMovimientos {
    + registrarIngreso(monto: double, desc: String): void
    + registrarGasto(monto: double, desc: String): void
    + actualizarCartera(monto: double): void
  }

  abstract class Movimiento <<abstract>> {
    - id: String
    - monto: double
    - fecha: Date
    - descripcion: String
    - categoria: String
  }

  class Ingreso
  class Gasto

  class Cartera {
    - nombre: String
    - saldoActual: double
    - tipo: String
    + actualizarCartera(monto: double): void
  }

  ' DAOs del módulo
  class MovimientoDAO
  class CarteraDAO
}

' --- Módulo de Deudas ---
package "Gestión de Deudas" #LightGreen {
  class ControladorDeudas {
    + registrarDeuda(monto: double, acreedor: String, ...): void
    + abonarADeuda(idDeuda: String, monto: double): void
  }

  class DeudaPrestamo {
    - id: String
    - montoTotal: double
    - montoPagado: double
    + registrarAbono(monto: double)
  }

  ' DAO del módulo
  class DeudaPrestamoDAO
}

' --- Módulo de Recordatorios ---
package "Recordatorios" #LightYellow {
  class ServletRecordatorio  {
    - recordatorioDAO: RecordatorioDAO
    - listarRecordatorios(): void
    - mostrarFormulario(recordatorio: Recordatorio): void
    - mostrarFormularioEditar(): void
    - construirRecordatorioDesdeRequest(): Recordatorio
    - crearRecordatorio(): void
    - actualizarRecordatorio(): void
    - borrarRecordatorio(): void
  }

  class ServletNotificacion  {
    - recordatorioDAO: RecordatorioDAO
    - gson: Gson
    + procesarNotificaciones()
  }

  class Recordatorio {
    - id: Long
    - fechaInicio: LocalDate
    - fechaFin: LocalDate
    - descripcion: String
    - recurrencia: Recurrencia
    - diasDeAnticipacion: int
    - monto: double
    + obtenerFechaVencimiento(hoy: LocalDate): Optional<LocalDate>
    - calcularProximaFechaVencimiento(desde: LocalDate): LocalDate
  }

  enum Recurrencia {
    NINGUNA
    DIARIA
    SEMANAL
    MENSUAL
    ANUAL
  }

  class DAORecordatorio {
    + listarActivos(): List<Recordatorio>
  }
}

' --- Módulo de Resumen ---
package "Resumen Financiero" #LightSalmon {
  class ControladorResumenFinanciero {
    + registrarResumenFinanciero(): ResumenFinanciero
    + consultarResumenFinanciero(id: String): ResumenFinanciero
    + subirArchivo()
    + procesarInformacion()
  }

  class ResumenFinanciero {
    - ingresosTotales: double
    - gastosTotales: double
    - ahorroNeto: double
  }

  ' DAO del módulo
  class ResumenFinancieroDAO
}


' ===================================
'      DEFINICIÓN DE RELACIONES
' ===================================

' --- Relaciones del Nivel Superior (Inicio -> Controladores) ---
Inicio o-- ControladorMovimientos
Inicio o-- ControladorDeudas
Inicio "1" o-- "1" ServletRecordatorio
Inicio "1" o-- "1" ServletNotificacion
Inicio o-- ControladorResumenFinanciero


' --- Relaciones dentro del paquete de Movimientos ---
ControladorMovimientos ..> Movimiento
ControladorMovimientos ..> Cartera
ControladorMovimientos *-- MovimientoDAO
ControladorMovimientos *-- CarteraDAO
Movimiento <|-- Ingreso
Movimiento <|-- Gasto


' --- Relaciones dentro del paquete de Deudas ---
ControladorDeudas ..> DeudaPrestamo
ControladorDeudas *-- DeudaPrestamoDAO


' --- Relaciones dentro del paquete de Recordatorios ---
ServletRecordatorio "1" *-- "1" DAORecordatorio : contiene
ServletRecordatorio "1" ..> "*" Recordatorio : maneja
ServletRecordatorio "1" ..> "*" Recurrencia : utiliza
ServletNotificacion "1" *-- "1" DAORecordatorio : contiene
ServletNotificacion "1" ..> "*" Recordatorio : consulta
Recordatorio "1" *-- "1" Recurrencia : tiene
DAORecordatorio "1" ..> "*" Recordatorio : persiste
ControladorResumenFinanciero ..> ResumenFinanciero
ControladorResumenFinanciero *-- ResumenFinancieroDAO


' --- Relaciones ENTRE paquetes (Colaboraciones) ---
' Pagar una deuda USA el controlador de movimientos para registrar el gasto
ControladorDeudas ..> ControladorMovimientos


' --- Herencia de la Capa de Datos (DAO) ---
DAOBase <|-- DAORecordatorio
DAOBase <|-- MovimientoDAO
DAOBase <|-- CarteraDAO
DAOBase <|-- DeudaPrestamoDAO
DAOBase <|-- ResumenFinancieroDAO

@enduml