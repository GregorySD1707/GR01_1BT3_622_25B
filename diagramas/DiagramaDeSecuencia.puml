@startuml

actor ":Usuario" as usuario
participant ":Inicio" as inicio
participant ":ControladorMovimientos" as controladorMovimientos
participant ":Gasto" as gasto
participant ":Ingreso" as ingreso
participant ":MovimientoDAO" as movimientoDAO
participant ":Cartera" as cartera
participant ":CarteraDAO" as carteraDAO
participant ":ControladorDeudas" as controladorDeudas
participant ":DeudaPrestamo" as deudaPrestamo
participant ":DeudaPrestamoDAO" as deudaPrestamoDAO
participant ":ControladorResumenFinanciero" as controladorResumen
participant ":ResumenFinanciero" as resumen
participant ":ResumenFinancieroDAO" as resumenDAO
participant ":ServletRecordatorio" as servletRecordatorio
participant ":ServletNotificacion" as servletNotificacion
participant ":Recordatorio" as recordatorio
participant ":DAORecordatorio" as DAOrecordatorioO

== Registrar Ingreso y Gasto ==
usuario -> inicio: seleccionarRegistrarIngreso()
inicio -> controladorMovimientos: registrarIngreso(monto, descripcion)
controladorMovimientos -> movimientoDAO: crear(ingreso)
controladorMovimientos -> carteraDAO: buscarPorID(idCartera)
controladorMovimientos -> cartera: actualizarCartera(monto)
controladorMovimientos -> carteraDAO: actualizar(cartera)

usuario -> inicio: seleccionarRegistrarGasto()
inicio -> controladorMovimientos: registrarGasto(monto, descripcion)
controladorMovimientos -> movimientoDAO: crear(gasto)
controladorMovimientos -> carteraDAO: buscarPorID(idCartera)
controladorMovimientos -> cartera: actualizarCartera(-monto)
controladorMovimientos -> carteraDAO: actualizar(cartera)

== Registrar Deuda y abonar a Deuda==
usuario -> inicio: seleccionarRegistrarDeuda()
inicio -> controladorDeudas: registrarDeuda(monto, acreedor)
controladorDeudas -> deudaPrestamoDAO: crear(deudaPrestamo)

usuario -> inicio: seleccionarAbonarDeuda()
inicio -> controladorDeudas: abonarADeuda(idDeuda, monto)
controladorDeudas -> deudaPrestamoDAO: buscarPorID(idDeuda)
controladorDeudas -> deudaPrestamo: registrarAbono(monto)
controladorDeudas -> deudaPrestamoDAO: actualizar(deudaPrestamo)

controladorDeudas -> controladorMovimientos: registrarGasto(monto, "Abono deuda", "Deudas")
controladorMovimientos -> movimientoDAO: crear(gasto)

== Generar Resumen Financiero ==
usuario -> inicio: solicitarResumenMensual()
inicio -> controladorResumen: subirArchivo()
controladorResumen -> controladorResumen: procesarInformacion()
controladorResumen -> resumenDAO: crear(resumen)
inicio -> controladorResumen: consultarResumenFinanciero()


== Gestionar Recordatorios ==

== Crear Recordatorio ==

usuario -> inicio: seleccionarCrearRecordatorio()
inicio -> servletRecordatorio: solicitarFormularioNuevoRecordatorio()
servletRecordatorio -> servletRecordatorio: mostrarFormulario(recordatorio)
servletRecordatorio --> inicio: VistaFormularioRecordatorio.jsp
inicio --> usuario: mostrarFormulario()

usuario -> inicio: completarDatosRecordatorio()
inicio -> servletRecordatorio: enviarDatosRecordatorio()
servletRecordatorio -> servletRecordatorio: construirRecordatorioDesdeRequest()
servletRecordatorio -> servletRecordatorio: crearRecordatorio()
servletRecordatorio -> recordatorio: new Recordatorio()
servletRecordatorio -> DAOrecordatorio: crear(recordatorio)
servletRecordatorio --> inicio: confirmarCreacionExitosa()
inicio --> usuario: mostrarMensajeExito()

== Listar Recordatorios ==
usuario -> inicio: solicitarListaRecordatorios()
inicio -> servletRecordatorio: obtenerRecordatorios()
servletRecordatorio -> servletRecordatorio: listarRecordatorios()
servletRecordatorio -> DAOrecordatorio: listar()
DAOrecordatorio --> servletRecordatorio: List<Recordatorio>
servletRecordatorio --> inicio: VistaRecordatorios.jsp
inicio --> usuario: mostrarListaRecordatorios()

== Editar Recordatorio ==
usuario -> inicio: seleccionarEditarRecordatorio(id)
inicio -> servletRecordatorio: solicitarFormularioEdicion()
servletRecordatorio -> servletRecordatorio: mostrarFormularioEditar()
servletRecordatorio -> DAOrecordatorio: buscarPorId(id)
DAOrecordatorio --> servletRecordatorio: Recordatorio
servletRecordatorio -> servletRecordatorio: mostrarFormulario(recordatorio)
servletRecordatorio --> inicio: VistaFormularioRecordatorio.jsp
inicio --> usuario: mostrarFormularioConDatos()

usuario -> inicio: modificarDatosRecordatorio()
inicio -> servletRecordatorio: enviarDatosModificados()
servletRecordatorio -> servletRecordatorio: construirRecordatorioDesdeRequest()
servletRecordatorio -> servletRecordatorio: actualizarRecordatorio()
servletRecordatorio -> DAOrecordatorio: actualizar(recordatorio)
servletRecordatorio --> inicio: confirmarActualizacion()
inicio --> usuario: mostrarMensajeExito()

== Eliminar Recordatorio ==
usuario -> inicio: solicitarEliminarRecordatorio(id)
inicio -> servletRecordatorio: eliminarRecordatorio()
servletRecordatorio -> servletRecordatorio: borrarRecordatorio()
servletRecordatorio -> DAOrecordatorio: borrar(idRecordatorio)
servletRecordatorio --> inicio: confirmarEliminacion()
inicio --> usuario: mostrarMensajeExito()

== Obtener Notificaciones ==
usuario -> servletNotificacion: solicitarNotificaciones()
servletNotificacion -> DAOrecordatorio: listarActivos()
DAOrecordatorio --> servletNotificacion: List<Recordatorio>

loop para cada recordatorio
    servletNotificacion -> recordatorio: obtenerFechaVencimiento(hoy)
    recordatorio -> recordatorio: calcularProximaFechaVencimiento(desde)
    recordatorio --> servletNotificacion: Optional<LocalDate>
end

servletNotificacion -> servletNotificacion: procesarNotificaciones()
servletNotificacion --> usuario: notificaciones JSON


@enduml