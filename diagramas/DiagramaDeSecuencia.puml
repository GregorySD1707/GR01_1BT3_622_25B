@startuml

actor ":Usuario" as usuario
participant ":Inicio" as inicio
participant ":ServletRecordatorio" as servletRecordatorio
participant ":ServletNotificacion" as servletNotificacion
participant ":ControladorResumenFinanciero" as controladorResumen
participant ":ServletDeudas" as servletDeudas
participant ":ServicioDeudas" as servicioDeudas
participant ":ServletMovimientos" as servletMovimientos
participant ":ServicioMovimientos" as servicioMovimientos
participant ":Gasto" as gasto
participant ":Ingreso" as ingreso
participant ":Cartera" as cartera
participant ":DeudaPrestamo" as deudaPrestamo
participant ":ResumenFinanciero" as resumen
participant ":Recordatorio" as recordatorio
participant ":DAOMovimiento" as daoMovimiento
participant ":DAOCartera" as carteraDAO
participant ":DAODeudaPrestamo" as deudaPrestamoDAO
participant ":ResumenFinancieroDAO" as resumenDAO
participant ":DAORecordatorio" as DAOrecordatorio

== Registrar Ingreso y Gasto ==
usuario -> inicio: seleccionarRegistrarIngreso()
inicio -> servletMovimientos: mostrarFormularioIngreso()
servletMovimientos -> servletMovimientos: construirIngresoDesdeRequest()
servletMovimientos -> servicioMovimientos: registrarIngreso(monto, descripcion, categoria, nombreCartera)
servicioMovimientos -> daoMovimiento: crear(ingreso)
daoMovimiento --> servicioMovimientos: ingresoPersistido
servicioMovimientos -> carteraDAO: obtenerOCrear(nombreCartera, tipoPreferido)
carteraDAO --> servicioMovimientos: cartera
servicioMovimientos -> cartera: actualizarCartera(monto)
servicioMovimientos -> carteraDAO: actualizar(cartera)
servicioMovimientos --> servletMovimientos: ingresoRegistrado
servletMovimientos --> inicio: mostrarConfirmacionIngreso

usuario -> inicio: seleccionarRegistrarGasto()
inicio -> servletMovimientos: mostrarFormularioGasto()
servletMovimientos -> servletMovimientos: construirGastoDesdeRequest()
servletMovimientos -> servicioMovimientos: registrarGasto(monto, descripcion, categoria, nombreCartera)
servicioMovimientos -> daoMovimiento: crear(gasto)
daoMovimiento --> servicioMovimientos: gastoPersistido
servicioMovimientos -> carteraDAO: obtenerOCrear(nombreCartera, tipoPreferido)
carteraDAO --> servicioMovimientos: cartera
servicioMovimientos -> cartera: actualizarCartera(-monto)
servicioMovimientos -> carteraDAO: actualizar(cartera)
servicioMovimientos --> servletMovimientos: gastoRegistrado
servletMovimientos --> inicio: mostrarConfirmacionGasto

== Consultar Totales de Movimientos ==
usuario -> inicio: solicitarTotales()
inicio -> servicioMovimientos: obtenerIngresosTotales()
servicioMovimientos -> daoMovimiento: sumIngresos()
daoMovimiento --> servicioMovimientos: totalIngresos
servicioMovimientos --> inicio: totalIngresos
inicio -> servicioMovimientos: obtenerGastosTotales()
servicioMovimientos -> daoMovimiento: sumGastos()
daoMovimiento --> servicioMovimientos: totalGastos
servicioMovimientos --> inicio: totalGastos
inicio -> servicioMovimientos: obtenerSaldoActualTotal()
servicioMovimientos -> carteraDAO: sumSaldoActual()
carteraDAO --> servicioMovimientos: saldoTotal
servicioMovimientos --> inicio: saldoTotal
inicio --> usuario: mostrarTotales(inIngresos, inGastos, saldo)

== Registrar Deuda y abonar a Deuda==
usuario -> inicio: seleccionarRegistrarDeuda()
inicio -> servletDeudas: mostrarFormularioRegistroDeuda()
servletDeudas -> servletDeudas: construirDeudaDesdeRequest()
servletDeudas -> servicioDeudas: registrarDeuda(nombrePersona, montoTotal, fechaPago)
servicioDeudas -> deudaPrestamoDAO: crear(deudaPrestamo)
deudaPrestamoDAO --> servicioDeudas: deudaPersistida

usuario -> inicio: seleccionarAbonarDeuda()
inicio -> servletDeudas: mostrarFormularioAbono()
servletDeudas -> servletDeudas: construirAbonoDesdeRequest()
servletDeudas -> servicioDeudas: abonarADeuda(idDeuda, monto)
servicioDeudas -> deudaPrestamoDAO: buscarPorId(idDeuda)
deudaPrestamoDAO --> servicioDeudas: deuda
servicioDeudas -> deudaPrestamo: registrarAbono(monto)
servicioDeudas -> deudaPrestamoDAO: actualizar(deudaPrestamo)

alt deuda es DEUDA
    servicioDeudas -> servicioMovimientos: registrarGasto(monto, "Abono deuda a " + deuda.nombrePersona, "Deudas", "Cartera principal")
else deuda es PRESTAMO
    servicioDeudas -> servicioMovimientos: registrarIngreso(monto, "Abono préstamo de " + deuda.nombrePersona, "Préstamos", "Cartera principal")
end
servicioMovimientos -> daoMovimiento: crear(movimiento)

== Generar Resumen Financiero ==
usuario -> inicio: solicitarResumenMensual()
inicio -> controladorResumen: subirArchivo()
controladorResumen -> controladorResumen: procesarInformacion()
controladorResumen -> resumenDAO: crear(resumen)
inicio -> controladorResumen: consultarResumenFinanciero()


== Gestionar Recordatorios ==

== Crear Recordatorio ==

usuario -> inicio: seleccionarCrearRecordatorio()
inicio -> servletRecordatorio: solicitarFormularioNuevoRecordatorio()
servletRecordatorio -> servletRecordatorio: mostrarFormulario(recordatorio)
servletRecordatorio --> inicio: VistaFormularioRecordatorio.jsp
inicio --> usuario: mostrarFormulario()

usuario -> inicio: completarDatosRecordatorio()
inicio -> servletRecordatorio: enviarDatosRecordatorio()
servletRecordatorio -> servletRecordatorio: construirRecordatorioDesdeRequest()
servletRecordatorio -> servletRecordatorio: crearRecordatorio()
servletRecordatorio -> recordatorio: new Recordatorio()
servletRecordatorio -> DAOrecordatorio: crear(recordatorio)
servletRecordatorio --> inicio: confirmarCreacionExitosa()
inicio --> usuario: mostrarMensajeExito()

== Listar Recordatorios ==
usuario -> inicio: solicitarListaRecordatorios()
inicio -> servletRecordatorio: obtenerRecordatorios()
servletRecordatorio -> servletRecordatorio: listarRecordatorios()
servletRecordatorio -> DAOrecordatorio: listar()
DAOrecordatorio --> servletRecordatorio: List<Recordatorio>
servletRecordatorio --> inicio: VistaRecordatorios.jsp
inicio --> usuario: mostrarListaRecordatorios()

== Editar Recordatorio ==
usuario -> inicio: seleccionarEditarRecordatorio(id)
inicio -> servletRecordatorio: solicitarFormularioEdicion()
servletRecordatorio -> servletRecordatorio: mostrarFormularioEditar()
servletRecordatorio -> DAOrecordatorio: buscarPorId(id)
DAOrecordatorio --> servletRecordatorio: Recordatorio
servletRecordatorio -> servletRecordatorio: mostrarFormulario(recordatorio)
servletRecordatorio --> inicio: VistaFormularioRecordatorio.jsp
inicio --> usuario: mostrarFormularioConDatos()

usuario -> inicio: modificarDatosRecordatorio()
inicio -> servletRecordatorio: enviarDatosModificados()
servletRecordatorio -> servletRecordatorio: construirRecordatorioDesdeRequest()
servletRecordatorio -> servletRecordatorio: actualizarRecordatorio()
servletRecordatorio -> DAOrecordatorio: actualizar(recordatorio)
servletRecordatorio --> inicio: confirmarActualizacion()
inicio --> usuario: mostrarMensajeExito()

== Eliminar Recordatorio ==
usuario -> inicio: solicitarEliminarRecordatorio(id)
inicio -> servletRecordatorio: eliminarRecordatorio()
servletRecordatorio -> servletRecordatorio: borrarRecordatorio()
servletRecordatorio -> DAOrecordatorio: borrar(idRecordatorio)
servletRecordatorio --> inicio: confirmarEliminacion()
inicio --> usuario: mostrarMensajeExito()

== Obtener Notificaciones ==
usuario -> servletNotificacion: solicitarNotificaciones()
servletNotificacion -> DAOrecordatorio: listarActivos()
DAOrecordatorio --> servletNotificacion: List<Recordatorio>

loop para cada recordatorio
    servletNotificacion -> recordatorio: obtenerFechaVencimiento(hoy)
    recordatorio -> recordatorio: calcularProximaFechaVencimiento(desde)
    recordatorio --> servletNotificacion: Optional<LocalDate>
end

servletNotificacion -> servletNotificacion: procesarNotificaciones()
servletNotificacion --> usuario: notificaciones JSON


@enduml