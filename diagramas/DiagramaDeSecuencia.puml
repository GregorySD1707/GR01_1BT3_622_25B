@startuml

actor ":Usuario" as usuario
participant ":Inicio" as inicio
participant ":ServicioMovimientos" as servicioMovimientos
participant ":Gasto" as gasto
participant ":Ingreso" as ingreso
participant ":DAOMovimiento" as daoMovimiento
participant ":Cartera" as cartera
participant ":CarteraDAO" as carteraDAO
participant ":ControladorDeudas" as controladorDeudas
participant ":DeudaPrestamo" as deudaPrestamo
participant ":DeudaPrestamoDAO" as deudaPrestamoDAO
participant ":ControladorResumenFinanciero" as controladorResumen
participant ":ResumenFinanciero" as resumen
participant ":ResumenFinancieroDAO" as resumenDAO
participant ":ServletRecordatorio" as servletRecordatorio
participant ":ServletNotificacion" as servletNotificacion
participant ":Recordatorio" as recordatorio
participant ":RecordatorioDAO" as recordatorioDAO

== Registrar Ingreso y Gasto ==
usuario -> inicio: seleccionarRegistrarIngreso()
inicio -> servicioMovimientos: registrarIngreso(monto, descripcion, categoria, nombreCartera)
servicioMovimientos -> daoMovimiento: crear(ingreso)
daoMovimiento --> servicioMovimientos: ingresoPersistido
servicioMovimientos -> carteraDAO: obtenerOCrear(nombreCartera, tipoPreferido)
carteraDAO --> servicioMovimientos: cartera
servicioMovimientos -> cartera: actualizarCartera(monto)
servicioMovimientos -> carteraDAO: actualizar(cartera)
servicioMovimientos --> inicio: ingresoRegistrado
inicio --> usuario: mostrarConfirmacionIngreso

usuario -> inicio: seleccionarRegistrarGasto()
inicio -> servicioMovimientos: registrarGasto(monto, descripcion, categoria, nombreCartera)
servicioMovimientos -> daoMovimiento: crear(gasto)
daoMovimiento --> servicioMovimientos: gastoPersistido
servicioMovimientos -> carteraDAO: obtenerOCrear(nombreCartera, tipoPreferido)
carteraDAO --> servicioMovimientos: cartera
servicioMovimientos -> cartera: actualizarCartera(-monto)
servicioMovimientos -> carteraDAO: actualizar(cartera)
servicioMovimientos --> inicio: gastoRegistrado
inicio --> usuario: mostrarConfirmacionGasto

== Consultar Totales de Movimientos ==
usuario -> inicio: solicitarTotales()
inicio -> servicioMovimientos: obtenerIngresosTotales()
servicioMovimientos -> daoMovimiento: sumIngresos()
daoMovimiento --> servicioMovimientos: totalIngresos
servicioMovimientos --> inicio: totalIngresos
inicio -> servicioMovimientos: obtenerGastosTotales()
servicioMovimientos -> daoMovimiento: sumGastos()
daoMovimiento --> servicioMovimientos: totalGastos
servicioMovimientos --> inicio: totalGastos
inicio -> servicioMovimientos: obtenerSaldoActualTotal()
servicioMovimientos -> carteraDAO: sumSaldoActual()
carteraDAO --> servicioMovimientos: saldoTotal
servicioMovimientos --> inicio: saldoTotal
inicio --> usuario: mostrarTotales(inIngresos, inGastos, saldo)

== Registrar Deuda y abonar a Deuda==
usuario -> inicio: seleccionarRegistrarDeuda()
inicio -> controladorDeudas: registrarDeuda(monto, acreedor)
controladorDeudas -> deudaPrestamoDAO: crear(deudaPrestamo)

usuario -> inicio: seleccionarAbonarDeuda()
inicio -> controladorDeudas: abonarADeuda(idDeuda, monto)
controladorDeudas -> deudaPrestamoDAO: buscarPorID(idDeuda)
controladorDeudas -> deudaPrestamo: registrarAbono(monto)
controladorDeudas -> deudaPrestamoDAO: actualizar(deudaPrestamo)

controladorDeudas -> servicioMovimientos: registrarGasto(monto, "Abono deuda", "Deudas")
servicioMovimientos -> daoMovimiento: crear(gasto)

== Generar Resumen Financiero ==
usuario -> inicio: solicitarResumenMensual()
inicio -> controladorResumen: subirArchivo()
controladorResumen -> controladorResumen: procesarInformacion()
controladorResumen -> resumenDAO: crear(resumen)
inicio -> controladorResumen: consultarResumenFinanciero()


== Gestionar Recordatorios ==

== Crear Recordatorio ==

usuario -> inicio: seleccionarCrearRecordatorio()
servletRecordatorio -> servletRecordatorio: mostrarFormulario(request, response, recordatorio)
servletRecordatorio --> usuario: VistaFormularioRecordatorio.jsp

usuario --> servletRecordatorio: (datos del formulario)
servletRecordatorio -> servletRecordatorio: construirRecordatorioDesdeRequest(request)
servletRecordatorio -> servletRecordatorio: crearRecordatorio(request, response)
servletRecordatorio -> recordatorio: new Recordatorio(fechaInicio, fechaFin, descripcion, recurrencia, monto, diasDeAnticipacion)
servletRecordatorio -> recordatorioDAO: crear(recordatorio)
servletRecordatorio --> usuario: redirect /recordatorios?exito=creado

== Listar Recordatorios ==
usuario -> inicio: solicitarRecordatorios()
servletRecordatorio -> servletRecordatorio: listarRecordatorios(request, response)
servletRecordatorio -> recordatorioDAO: listar()
recordatorioDAO --> servletRecordatorio: List<Recordatorio>
servletRecordatorio --> usuario: VistaRecordatorios.jsp

== Editar Recordatorio ==
usuario -> inicio: seleccionarEditarRecordatorio(id)
servletRecordatorio -> servletRecordatorio: mostrarFormularioEditar(request, response)
servletRecordatorio -> recordatorioDAO: buscarPorId(id)
recordatorioDAO --> servletRecordatorio: Recordatorio
servletRecordatorio -> servletRecordatorio: mostrarFormulario(request, response, recordatorio)
servletRecordatorio --> usuario: VistaFormularioRecordatorio.jsp

usuario --> servletRecordatorio: (datos del formulario)
servletRecordatorio -> servletRecordatorio: actualizarRecordatorio(request, response)
servletRecordatorio -> servletRecordatorio: construirRecordatorioDesdeRequest(request)
servletRecordatorio -> recordatorioDAO: actualizar(recordatorio)

== Eliminar Recordatorio ==
usuario -> inicio: POST /recordatorios/eliminar (id)
servletRecordatorio -> servletRecordatorio: borrarRecordatorio(request, response)
servletRecordatorio -> recordatorioDAO: borrar(idRecordatorio)

== Obtener Notificaciones ==
usuario -> servletNotificacion: GET /notificaciones
servletNotificacion -> recordatorioDAO: listarActivos()
recordatorioDAO -> recordatorioDAO: executeQuery(session -> criteriaQuery.getResultList())
recordatorioDAO --> servletNotificacion: List<Recordatorio>

loop para cada recordatorio
    servletNotificacion -> recordatorio: obtenerFechaVencimiento(hoy)
    recordatorio -> recordatorio: calcularProximaFechaVencimiento(desde)
    recordatorio --> servletNotificacion: Optional<LocalDate>
end

servletNotificacion -> servletNotificacion: gson.toJson(notificaciones)
servletNotificacion --> usuario: JSON notificaciones


@enduml